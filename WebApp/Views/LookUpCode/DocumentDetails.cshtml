@using System.Web.Script.Serialization
@using WebApp.Extensions

@{
    Layout = null;
    var admin = User.Identity.CanCustomize();
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    var read = 1;
}

@Html.Partial("_FormButtons")
<div id="DocTypeDiv"></div>


<script>

    $(function () {
        showToolbar([2,3,11]);

        function changeRequiredOpt(record,formId){         
            if(record == 1)
            {
                $("#" + formId).find('[name="NationalitiesSec"]').css("display","");
                $("#" + formId).find('[name="JobsSec"]').css("display","none");

            }
            else if(record==2)
            {

                $("#" + formId).find('[name="JobsSec"]').css("display","");
                $("#" + formId).find('[name="NationalitiesSec"]').css("display","");
            }
            else
            {
                $("#" + formId).find('[name="JobsSec"]').css("display","none");
                $("#" + formId).find('[name="NationalitiesSec"]').css("display","none");
            }
        }
        
       

        // Back to index
        //var oldPage = localStorage.getItem("menuhigh").split(",");
        //oldulr = $("#"+ oldPage[2] + " a").attr("href");
        var model;
        //serialize The model to JavaScript to send to form.js
        model = @Html.Raw((new JavaScriptSerializer()).Serialize(Model));
        var Nationality = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Nationality));
        var Jobs = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Jobs));
        var AccessLevel = [{id:0,name:"@MsgUtils.Instance.Trls("Not Shared")"},{id:2,name: "@MsgUtils.Instance.Trls("Shared and can be downloaded")"}];
        var RequiredOpt = [{id:0,name:"@MsgUtils.Instance.Trls("Not Required")"}, {id:1,name: "@MsgUtils.Instance.Trls("Required for all jobs")"},{id:2,name: "@MsgUtils.Instance.Trls("Required for some jobs")"}];
        var inputTypes= @Html.Raw((new JavaScriptSerializer().Serialize(ViewBag.InputTypes)));
        var CodeName = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.CodeName));
        var url = "@Url.Action("ReadFormInfo", "Pages")";
        //console.log(Role.val());

        //Give Id for the form that will Show
        var formId = "LeaveTypeForm";
        model = @Html.Raw((new JavaScriptSerializer()).Serialize(Model));
        //If you press on Button Show it will be read only
        var read = "@Request.QueryString["Read"]";

        //Send the serialized model and props to form.js
        $.ajax({
            async: false,
            url: "@Url.Action("ReadFormInfo","Pages")",
            type: "GET",
            dataType: "json",
            contentType: 'application/json',
            data: { objectname: "DocType", version:"@version", roleId: "@Request.QueryString["RoleId"]"},
            success: function (data) {
                data.FormId = formId;
                data.TableName ="DocTypes";
                data.FormAction = "@Url.Action("SaveDocType", "LookUpCode")";
                data.Culture = "@User.Identity.GetCulture()";
                data.rtl = @rtl.ToString().ToLower();
                if(read == 1) data.mode = 'show';
                data.companyId = "@User.Identity.GetDefaultCompany()";
                data.admin = "@admin";
                $("#DocTypeDiv").Forms(data, model);
                FormJs.fillOptionsDynamic($("#" + formId), "AccessLevel", AccessLevel, model);
                FormJs.fillOptionsDynamic($("#" + formId), "IJobs", Jobs,null, model);
                FormJs.fillOptionsDynamic($("#" + formId), "INationalities", Nationality,null, model);


                $("#NotifyDays").removeAttr("formreq");
                $("input[name='HasExpiryDate']").removeAttr("formreq");
                $("#RequiredOpt").removeAttr("formreq");

                changeRequiredOpt(model.RequiredOpt,formId);
                ShowDocumenType(model.DocumenType,model.RequiredOpt);      
                changeExpiryDate(model.HasExpiryDate);


                $("#" + formId).on('blur change','#StartDate', function(){
                    FormJs.removeFormError(formId,"StartDate");
                    FormJs.removeFormError(formId,"EndDate");
                    var elem = $(this);
                    if($('#EndDate').val() != "" && elem.val() > $('#EndDate').val())
                    {
                        FormJs.addFormError(formId,"StartDate","@MsgUtils.Instance.Trls("StartDateLThanEndDate")");
                    }
                    else
                    {
                        FormJs.removeFormError(formId,"StartDate");

                    }

                });
                $("#NotifyDays").after('<label>@MsgUtils.Instance.Trls("Day")</label>');
                $("#"+formId).on('blur change','#EndDate',function(){
                    FormJs.removeFormError(formId,"StartDate");
                    FormJs.removeFormError(formId,"EndDate");
                    var elem = $(this);
                    if(elem.val()!=""){
                        
                        if($('#StartDate').val() != "" && elem.val() < $('#StartDate').val())
                        {
                            FormJs.addFormError(formId,"EndDate","@MsgUtils.Instance.Trls("EndDateGthanStartDate")");
                        }
                        else
                        {
                            FormJs.removeFormError(formId,"EndDate");

                        }

                    }
                });

                $('#HasExpiryDate').on('change', function(e) {
                    changeExpiryDate($(this).prop("checked"));
                });

            }
        });

        function changeExpiryDate(checked) {            if (checked == true)                              $("#NotifyDays").closest('.form-group').children().fadeIn()            else                             $("#NotifyDays").closest('.form-group').children().fadeOut()              } 

        $("#"+formId).on('change','#RequiredOpt',function(){
            var chk= $(this).val();
            changeRequiredOpt(chk,formId)
        });

       
        $("#"+formId).on('change','#DocumenType',function()
        {
            var id = $('#DocumenType').val();
            var requiredId = $("#RequiredOpt").data("kendoDropDownList").value();
            ShowDocumenType(id,requiredId);
        });

        if(model.Id > 0)
        {
            $("#" + formId).find("#IJobs").getKendoMultiSelect().value(model.IJobs);
            $("#" + formId).find("#INationalities").getKendoMultiSelect().value(model.INationalities);
        }


        function ShowDocumenType(id,requiredId)
        {

            $("#" + formId).find('[name="RequiredSec"]').css("display","none");
            if (id > 0)
            {
                debugger;
                var datasource = $("#DocumenType").data("kendoDropDownList").dataSource.data();
                var val = datasource.find(c => c.id == id);
                if(val.SysCode == 3)
                {

                    $("#" + formId).find('[name="RequiredSec"]').css("display","");
                    $("#" + formId).find('[name="NationalitiesSec"]').css("display","");                    
                    if(requiredId == 2)
                    {
                        $("#" + formId).find('[name="JobsSec"]').css("display","");                   
                    }
                    else if(requiredId == 0)
                    {
                        $("#" + formId).find('[name="NationalitiesSec"]').css("display","none");

                    }
                }
                else
                {
                    $("#" + formId).find('[name="JobsSec"]').css("display","none");
                    $("#" + formId).find('[name="RequiredSec"]').css("display","none");
                    $("#" + formId).find('[name="NationalitiesSec"]').css("display","none");
                }
            }
        }
            $("div[name=DocTypeAttrGridSec]").prepend('<div id="DocTypeAttrDiv" class="form-group col-lg-12 col-md-12 col-sm-12"></div>');
            var gridname = "'DocTypeAttrDiv'";
            Grids.batchGrid({
                read: "@Url.Action("ReadDocAttr", "LookUpCode")?Id="+ model.Id,
                lang: "@User.Identity.GetCulture()",
                objectName: "DocTypeAttrs",
                admin: "@admin", // Admin role
                lang: "@User.Identity.GetCulture()",
                toolbar:read==1? '<div></div>': '<div><div style="@(rtl ? "float: right" : "float: left")"><a class="btn btn-default btn-sm glyphicon glyphicon-plus" onclick="Grids.addNewClick(' + gridname + ')" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("AddNewRecord")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + gridname + ')" accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;&nbsp;<div class="btn-group" style="@(admin == false ? "display: none" : "")"><button type="button" class="btn btn-default btn-sm glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + gridname + ')"><span>&nbsp;&nbsp;&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a>&nbsp;&nbsp;</li></ul></div></div></div>',
                recordName: "Attribute",
                gridName: "DocTypeAttrDiv",
                height:500,
                columns: [
                    {field: "InputType", values: inputTypes},
                    {
                        field: "IsRequired",
                        template: '<input  type="checkbox" #:IsRequired == true ? "checked" : ""#  onchange="Grids.CheckBoxChanged(this,\'IsRequired\',' + gridname + ')"/>'
                    },
                    {
                        field: "CodeName", editor: function (container, options) {
                            if (options.model.InputType !=3) {
                                $('#DocTypeAttrDiv').data("kendoGrid").closeCell();

                            
                            }else
                            {
                                var input = '<input name="CodeName"/>';
                                $(input).appendTo(container).kendoDropDownList({
                                    valuePrimitive:true,
                                    dataTextField: "text",
                                    dataValueField: "value",
                                    dataSource:CodeName
                                });
                           
                            }

                        }
                    }
                ],
                save:function(e){
                    if(e.values.InputType &&e.values.InputType !=e.model.InputType )
                        e.model.CodeName=null;          
                }
           
            });
        
        $("#b1,#b2,#b3").off('click').on('click', function (e) {
                               
            if($("#" + formId).find(".k-invalid").length > 0) return ;
            var buttId = $(this).attr("id");
            FormJs.saveForm($("#"+formId), $(this), function (data) {
                debugger;
                toastr.success("@MsgUtils.Instance.Trls("SaveComplete")");
                model = data;
                console.log(model);
                if (buttId == "b3") updateHistory(oldUlr);
                if($("#RequiredOpt").val() != 2 ) { //2. Required for some jobs                       
                    $("#" + formId).find("#IJobs").getKendoMultiSelect().value([]);
                } 
                if(buttId == "b2")
                {
                    $("#DocTypeAttrDiv").data("kendoGrid").dataSource.data([]);
                }
            }, Grids.sendData("DocTypeAttrDiv"), buttId == "b2");
        });

    });
</script>



