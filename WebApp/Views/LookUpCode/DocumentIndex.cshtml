
@using System.Web.Script.Serialization
@using WebApp.Extensions

@{
    ViewBag.Title = "DisplayLookUpCode";
    Layout = null;
    var rtl = User.Identity.RTL();
    var admin = User.IsInRole("Admin");
    int dataLevel = 0, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
    var CodeName = ViewBag.name;
    string[] function = ViewData["Functions"] as string[];

}
@Html.Partial("_RequestFilters", new ViewDataDictionary { { "GridName", "DocumentDiv" }, { "HasDepts", "false" }, { "Functions", function }, { "TableName", "DocTypes" } })
<div id="DocumentDiv"></div>

<script>
    $("#NicePen").hide();
    var addUrl = "@Url.Action("DocumentDetails", "LookUpCode")";
    RequestFilters.ApplayAllFilters([], {}, "DocumentDiv", "@Url.Action("GetDocTypes", "LookUpCode")?MenuId=@Request.QueryString["MenuId"]", addUrl);
    var RequiredOpt = [{ value: 0, text: "@MsgUtils.Instance.Trls("Not Required")" }, { value: 1, text: "@MsgUtils.Instance.Trls("Required for all jobs")" }, { value: 2, text: "@MsgUtils.Instance.Trls("Required for some jobs")" }];
    var grid = "'DocTypes'";
    var objectName = "DocTypes";
    Grids.indexGrid({
        read: "@Url.Action("GetDocTypes", "LookUpCode")?MenuId=@Request.QueryString["MenuId"]",
        show:"@Url.Action("DocumentDetails", "LookUpCode")",
        edit: "@Url.Action("DocumentDetails", "LookUpCode")",
         del: "@Url.Action("DeleteDocTypes", "LookUpCode")",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        objectName:objectName,
        recordName: "Name",
        fields: { EndDate: { defaultValue: null }, StartDate: { defaultValue: new Date(2010, 0) } },
        gridName: "DocumentDiv",
        height: 700,
        select: {"RequiredOpt": RequiredOpt },
        columns: [{
            field: "HasExpiryDate",
            template: '<input  type="checkbox" #:HasExpiryDate == true ? "checked" : ""# disabled />'
        }, { field: "RequiredOpt", values: RequiredOpt }],
        toolbar: '<div style="float: left"><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}' +
               '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
               '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>',
    });

</script>
