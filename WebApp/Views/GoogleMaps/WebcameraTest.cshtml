
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>WebcameraTest</title>
    @Scripts.Render("~/bundles/jquery")
    <script src="~/Scripts/app/CommonScripts.js"></script>
</head>
<body>
    <div> 

        <video id="video" width="640" height="480" autoplay></video>
        <button id="snap">Snap Photo</button>
        <button id="Save">Save</button>
        <div class="canvas__container">
            <canvas id="canvas" class="canvas__canvas" width="640" height="480"></canvas>
        </div>


        <script>
            var video = document.getElementById('video');
            var canvas = document.getElementById('canvas');
            var context = canvas.getContext('2d');

            StartCamera();
            RegisterTakePhoto_Upload_Button();

            function StartCamera() {
               
                // Grab elements, create settings, etc.
               

                // Get access to the camera!
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    // Not adding `{ audio: true }` since we only want video now
                    navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
                    
                        video.src = window.URL.createObjectURL(stream);
                        video.play();
                    }).catch(errBack);
                }
                else if (navigator.getUserMedia) { // Standard
                    navigator.getUserMedia({ video: true }, function (stream) {
                        video.src = stream;
                        video.play();
                    }, errBack);
                } else if (navigator.webkitGetUserMedia) { // WebKit-prefixed
                    navigator.webkitGetUserMedia({ video: true }, function (stream) {
                        video.src = window.webkitURL.createObjectURL(stream);
                        video.play();
                    }, errBack);
                } else if (navigator.mozGetUserMedia) { // Mozilla-prefixed
                    navigator.mozGetUserMedia({ video: true }, function (stream) {
                        video.src = window.URL.createObjectURL(stream);
                        video.play();
                    }, errBack);

                }
            }

            function errBack(err)
            {
                alert(err.message);
              
            }
            function RegisterTakePhoto_Upload_Button()
            {
                // Elements for taking the snapshot
                

                // Trigger photo take
                document.getElementById("snap").addEventListener("click", function () {

                    context.drawImage(video, 0, 0, 640, 480);
                  
                });

                document.getElementById("Save").addEventListener("click", function () {

                    debugger;
                    context.drawImage(video, 0, 0, 640, 480);
                  var dataURL = canvas.toDataURL('image/png');

                    var img = imageDataURItoBlob(dataURL);
                    var objURL = window.URL.createObjectURL(img);
                    window.URL.revokeObjectURL(objURL);

                    var url = '@Url.Action("Upload", "GoogleMaps",new {area="" })';
                    var formData = new FormData();
                    formData.append('file', img, 'blob.jpg');

                    var request = new XMLHttpRequest();
                    request.open("POST", url);
                    request.send(formData);


                    });
            }
          

            function imageDataURItoBlob(dataURI) {
                // convert base64/URLEncoded data component to raw binary data held in a string
                var byteString;

                if (dataURI.split(',')[0].indexOf('base64') >= 0)
                    byteString = atob(dataURI.split(',')[1]);
                else
                    byteString = unescape(dataURI.split(',')[1]);

                // separate out the mime component
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

                // write the bytes of the string to a typed array
                var ia = new Uint8Array(byteString.length);

                for (var i = 0; i < byteString.length; i++) {
                    ia[i] = byteString.charCodeAt(i);
                }

                return new Blob([ia], {
                    type: mimeString
                });

            }


        </script>
    </div>
</body>
</html>
