@using WebApp.Extensions
@using System.Web.Script.Serialization
@{
    Layout = null;
    var admin = User.IsInRole("Admin");
    int dataLevel = 4, read = 0;
    var rtl = User.Identity.RTL();
    var culture = User.Identity.GetCulture();
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
    string[] function = ViewData["Functions"] as string[];
}
<br />
<div id="acceptedLeaves"></div>

<script>
    var grid = "'acceptedLeaves'";
    var approvalStatus = [
         { value: 1, text: '@MsgUtils.Instance.Trls("Darft")' },
         { value: 2, text: '@MsgUtils.Instance.Trls("Submit")' },
         { value: 3, text: '@MsgUtils.Instance.Trls("AprovalEmployeeReview")' },
         { value: 4, text: '@MsgUtils.Instance.Trls("ManagerReview")' },
         { value: 5, text: '@MsgUtils.Instance.Trls("Accepted")' },
         { value: 6, text: '@MsgUtils.Instance.Trls("Approved")' },
         { value: 7, text: '@MsgUtils.Instance.Trls("Cancel before accepted")' },
         { value: 8, text: '@MsgUtils.Instance.Trls("Cancel after accepted")' },
         { value: 9, text: '@MsgUtils.Instance.Trls("Rejected")' }
    ];

    function Exist(data) {
        if (data.HasImage)
            return "url(../SpecialData/Photos/"+@User.Identity.GetDefaultCompany().ToString()+"/"+data.EmpId+".jpeg?dummy="+(new Date().getTime())+")"
        else
            return "url(/SpecialData/Photos/noimage.jpg)"
    }

    var columns = [
          {
              field: "Employee",
              template: "<div class='k-people-photo' " +
                              "style='background-image: #:Exist(data)# '></div>" +
                              "&nbsp;&nbsp;&nbsp;<div class='k-people-name'>#:Employee#</div>"
          },
          { field: "ApprovalStatus", values: approvalStatus }
    ];

    Grids.indexGrid({
        read: "@Url.Action("ReadAcceptedLeave", "LeavePosting")?MenuId=@Request.QueryString["MenuId"]",
        show: "@Url.Action("AcceptedLeaveDetails", "LeavePosting")",
        edit: "@Url.Action("AcceptedLeaveDetails", "LeavePosting")",
        objectName: "AcceptedLeaves",
        gridName: "acceptedLeaves",
        recordName: "Name",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        recordName: "Employee",
        columns: columns,
        select: { "ApprovalStatus": approvalStatus },
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true,
        pageable: { pageSize: 100, pageSizes: [50, 100, 150, 200, 300, 400, 500] },
        toolbar: '<div style="@(rtl ? "float: right" : "float: left")"><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}'+
                 '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
                 '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>',
    });
</script>
