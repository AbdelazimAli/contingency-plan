@using System.Web.Script.Serialization
@using WebApp.Extensions
@model Model.ViewModel.Payroll.PayRequestViewModel
@{
    Layout = null;
    var admin = User.IsInRole("Admin");
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
}
<style>
    #DeptsTree {
        min-height: 150px;
        max-height: 250px;
    }
</style>

<div id="pageTabs"></div>
<div id="docWindow"></div>
<link href="~/Content/forms.css" rel="stylesheet" />
<script src="~/Scripts/app/tree.js"></script>

<script>
    FormJs.DrawTabs("pageTabs");
    var model = @Html.Raw((new JavaScriptSerializer()).Serialize(Model));

    $("#t_Workflow").click(function(){
        $('#tab_Workflow').load("@Url.Action("WorkFlow", "Log")"+"?Source=Pay&SourceId=@User.Identity.GetDefaultCompany()&DocumentId=@Model.Id&RoleId=@Request.QueryString["RoleId"]&ObjectName=LeaveRequest&Version=@Request.QueryString["Version"]&DataLevel=@Request.QueryString["DataLevel"]&Read=@Request.QueryString["Read"]");
    });

    $("#t_AudiLog").click(function(){
        $('#tab_AudiLog').load("@Url.Action("Log", "Log", new { id = Model.Id })?RoleId=@Request.QueryString["RoleId"]&ObjectName=PayRequest&Version=@Request.QueryString["Version"]&DataLevel=@Request.QueryString["DataLevel"]&Read=@Request.QueryString["Read"]");
    });

    $("#t_GeneralInfo").click(function () {
        $("#tab_GeneralInfo").html("<div id='payDiv'></div>");
        PayRequestForm();
    });

    $("#t_GeneralInfo").click();

    var oldPage = localStorage.getItem("menuhigh").split(",");
    oldulr = $("#"+ oldPage[2] + " a").attr("href");

    //Checkbox change

    function PayRequestForm() {

        var ApprovalStatus = ['@MsgUtils.Instance.Trls("Darft")', '@MsgUtils.Instance.Trls("Submit")', '@MsgUtils.Instance.Trls("AprovalEmployeeReview")', '@MsgUtils.Instance.Trls("ManagerReview")', '@MsgUtils.Instance.Trls("Accepted")' ,'@MsgUtils.Instance.Trls("Approved")' ,'@MsgUtils.Instance.Trls("Cancel before accepted")' , '@MsgUtils.Instance.Trls("Cancel after accepted")'  , '@MsgUtils.Instance.Trls("Rejected")'];
        var PayMethod = [{id: 1, name: '@MsgUtils.Instance.Trls("Cash")'}, {id: 2, name: '@MsgUtils.Instance.Trls("Cheque")'}, {id: 3, name: '@MsgUtils.Instance.Trls("Bank Transfer")'}];
        var EmpSelect = [{id: 1, name: '@MsgUtils.Instance.Trls("Specific departments")'}, {id: 2, name: '@MsgUtils.Instance.Trls("Specific employees")'}];
        var PaySelect = [{id: 1, name: '@MsgUtils.Instance.Trls("Payroll group")'}, {id: 2, name: '@MsgUtils.Instance.Trls("Payroll")'}, {id: 3, name: '@MsgUtils.Instance.Trls("Specific salary items")'}, {id: 4, name: '@MsgUtils.Instance.Trls("Formula")'}];

        var Payroll = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Payroll)),
            SalaryItems = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.SalaryItems)),
            Formula = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Formula)),
            EmpList = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Employees));

        var BankIds = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.BankId));

        var url = "@Url.Action("ReadFormInfo", "Pages")", read = "@Request.QueryString["Read"]";
        var formId = "payRequestForm", selectedDepts = [], isShow = (read == 1 || (model.ApprovalStatus != 1 && model.ApprovalStatus != 3));

        $.getJSON(url, { objectname: 'PayRequest', version: "@Request.QueryString["Version"]", RoleId: "@Request.QueryString["RoleId"]" }, function (data) {
            data.FormAction = "@Url.Action("Details", "PayRequest")";
            data.FormId = formId;
            data.Culture = '@culture';
            data.TableName = "PayRequests";
            data.companyId = "@compantId";
            data.admin = '@admin';
            data.rtl = @rtl.ToString().ToLower();
            data.btns = ["back", "doc"];
            if(isShow) data.mode = 'show';

            model.ApprovalStatus = ApprovalStatus[model.ApprovalStatus - 1];
            if(model.Id != 0) {
                if(model.Employees) model.EmployeesIds = model.Employees.split(',');
                if(model.Departments) selectedDepts = model.Departments.split(',');
                if(model.SalaryItems) model.SalaryItemsIds = model.SalaryItems.split(',');
            }
            $("#payDiv").Forms(data, model);
            var myForm = $("#" + formId);

            FormJs.fillOptionsDynamic(myForm, "PayMethod", PayMethod, model, {hasFilter: false});
            FormJs.fillOptionsDynamic(myForm, "EmpSelect", EmpSelect, model, {hasFilter: false});
            FormJs.fillOptionsDynamic(myForm, "PaySelect", PaySelect, model, {hasFilter: false});
            FormJs.fillOptionsDynamic(myForm, "Requester", EmpList, model, { remoteTableName: "People" });
            FormJs.fillOptionsDynamic(myForm, "EmployeesIds", EmpList, model);
            FormJs.fillOptionsDynamic(myForm, "PayrollId", Payroll, model);
            FormJs.fillOptionsDynamic(myForm, "FormulaId", Formula, model);
            FormJs.fillOptionsDynamic(myForm, "SalaryItemsIds", SalaryItems, model);

            if(model.ApprovalStatus == 7 || model.ApprovalStatus == 8)
                myForm.find('.section[name="rejectSec"]').closest('.set').hide();
            else if(model.ApprovalStatus == 9)
                myForm.find('.section[name="cancelSec"]').closest('.set').hide();
            else {
                myForm.find('.section[name="cancelSec"]').closest('.set').hide();
                myForm.find('.section[name="rejectSec"]').closest('.set').hide();
            }

            myForm.find("#Departments").parent().append("<div id='DeptsTree'></div>");
            myForm.find("#Departments").remove();

            myForm.find("#EmployeesIds").closest('.form-group').hide();
            myForm.find("#DeptsTree").closest('.form-group').hide();

            var hidden = "<input type='hidden' id='submit' name='submit' value='false' /> <input  type='hidden' id='Employees' name='Employees' /><input  type='hidden' id='SalaryItems' name='SalaryItems' /> <input  type='hidden' id='Departments' name='Departments' />";
            myForm.append(hidden);

            //style
            myForm.find('[name="paySec"]').find('#PayrollGroup, #PayrollId , #FormulaId').closest("div").css("width", "51.5%");

            //---------change PaySelect---------
            myForm.find('#PaySelect').change(PaySelectChange);
            function PaySelectChange() {
                var val = (isShow ? model.EmpSelect + "": myForm.find('#PaySelect').val());
                switch (val) {
                    case '1': //PayrollGroup
                        hideColumns("PayrollGroup"); break;
                    case '2': //PayrollId
                        hideColumns("PayrollId"); break;
                    case '3': //SalaryItems
                        hideColumns("SalaryItemsIds"); break;
                    case '4': //FormulaId
                        hideColumns("FormulaId"); break;
                    default:
                        hideColumns(); break;
                }

                function hideColumns(showColumn) {
                    var hiddenSel = myForm.find('[name="paySec"]').find('#PayrollGroup, #PayrollId ,#SalaryItemsIds, #FormulaId').not('#' + showColumn);
                    hiddenSel.closest('.form-group').hide();
                    myForm.find("#" + showColumn).closest('.form-group').show();
                }
            }

            //---------change EmpSelect---------
            myForm.find('#EmpSelect').change(EmpSelectChange);
            function EmpSelectChange() {
                var val = (isShow ? model.EmpSelect+ "" : myForm.find('#EmpSelect').val());
                switch (val) {
                    case '1':  //1.Specific departments
                        showDepartments(); break;
                    case '2': //2.Specific employees
                        showEmployees(); break;
                    default:
                        myForm.find("#EmployeesIds").closest('.form-group').hide();
                        myForm.find("#DeptsTree").closest('.form-group').hide();
                        break;
                }
            }

            //if EmpSelect == 2. Employee
            function showEmployees() {

                myForm.find("#DeptsTree").closest('.form-group').hide();
                myForm.find("#EmployeesIds").closest('.form-group').show();
                if(EmpList == undefined || EmpList.length == 0) {
                    $.get("@Url.Action("GetEmployees", "PayRequest")", null, function(list) {
                        var empMultiSelect = myForm.find("#EmployeesIds").data("kendoMultiSelect");
                        empMultiSelect.dataSource.data(list);
                        empMultiSelect.value(model.EmployeesIds);
                    });
                }
            }

            //if EmpSelect == 1. Departments
            function showDepartments() {
                myForm.find("#EmployeesIds").closest('.form-group').hide();
                myForm.find("#DeptsTree").closest('.form-group').show();

                var $deptsDiv = myForm.find("#DeptsTree");
                if(myForm.find("#DeptsTree").data("kendoTreeView") == undefined) {
                    myForm.find("#DeptsTree").TreeView({
                        dragAndDrop: false,
                        table: "CompanyStructures",
                        root: "Company",
                        lang: "@culture",
                        checkboxes: { checkChildren: true },
                        check: function (e) {
                            var treeView = $deptsDiv.data("kendoTreeView");
                            selectedDepts = [];
                            checkNodeIds(treeView.dataSource.view(), selectedDepts);
                        },
                        dataBound: function (e) {
                            var treeView = $deptsDiv.data("kendoTreeView");
                            treeView.expand(".k-item");
                            if (e.node) {
                                if(isShow) $(e.node).find('.k-group input, .k-checkbox').prop("disabled",true);
                                bindChecked([treeView.dataItem(e.node)], selectedDepts);
                            }
                        }
                    });
                }

                //Empty Employees
                //var multiSel = myForm.find("#EmployeesIds").data('kendoMultiSelect');
                //if(multiSel) multiSel.value([]);
            }

            //-------Grid-------
            if(myForm.find("#EmpGrid").length == 0 || myForm.find("#EmpGrid").data("kendoGrid") == undefined) {
                myForm.find(".section[name='empGridSec']").append("<div><button id='refresh' class='btn btn-sm btn-primary ajaxBtn' >@MsgUtils.Instance.Trls("Refresh")</button></div><br/><div id='EmpGrid'></div>");
                var gridname = "'EmpGrid'";

                Grids.batchGrid({
                    read: getGridUrl(),
                    admin: "@admin",
                    lang: "@culture",
                    objectName: 'PayRequestEmployees',
                    tableName: 'PayRequestDets',
                    gridName: "EmpGrid",
                    pageable: false,
                    fields: {Employee:{ editable: false },Stopped:{ editable: false }}, //BankId
                    columns: [{ field: "BankId", values: BankIds },
                        { field: "Stopped", template: '<input id="#:Id#" type="checkbox" #:Stopped == true ? "checked" : ""# onchange="Grids.CheckBoxChanged(this,\'Stopped\',' + gridname + ')"'+ (isShow ? ' disabled' : '') +' />' }
                    ],
                    toolbar:'<div><a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + gridname + ')"  accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;&nbsp;<div class="btn-group" style="@(admin == false ? "display: none" : "")"><button type="button" class="btn btn-default btn-sm glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + gridname+ ')" style="@(admin == false ? "display: none" : "")"><span>&nbsp;&nbsp;&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li><li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf('+gridname+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>'+
                            '<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl('+gridname+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li></ul></div></div></div>',
                });
            }

            if(model.Id == 0) myForm.find('#EmpSelect').data('kendoDropDownList').select(1);

            PaySelectChange();
            EmpSelectChange();

            function getGridUrl() {
                var depts, emps, requestId = myForm.find("#Id").val(), empSelect = getEmpSelect();
                depts = (empSelect && empSelect.type == 1 ? empSelect.value: "");
                emps = (empSelect && empSelect.type == 2 ? empSelect.value: "");

                return "@Url.Action("GetDeptsEmployees", "PayRequest")?requestId=" + requestId + "&Emps=" + emps + "&Depts=" + depts;
            }
            function getEmpSelect() {
                var empSelectVal = myForm.find('#EmpSelect').val(), result;
                if(empSelectVal == 2) { //2. Employees
                    var selectedEmps = myForm.find('#EmployeesIds').val();
                    if(selectedEmps) result = {type: 2, value: selectedEmps.join(',')};
                }
                else if(empSelectVal == 1 && selectedDepts.length) //1. Departments
                    result = {type: 1, value: selectedDepts.join(',')};

                return result;
            }

            //refresh grid
            myForm.on('click', '#refresh', function(e) {
                e.preventDefault();
                var grid = myForm.find("#EmpGrid").data("kendoGrid");
                if(grid) {
                    grid.dataSource.transport.options.read.url = getGridUrl();
                    grid.dataSource.read();
                }
            });

            //----------------------------------

            myForm.find('#saveChanges').val('@MsgUtils.Instance.Trls("SaveChanges")');
            myForm.find('#submitRequest').val('@MsgUtils.Instance.Trls("submitRequest")');

            myForm.on('click', '#saveChanges, #submitRequest', function(e) {
                //EmpSelect
                var paySelectVal = myForm.find('#PaySelect').val(), empSelectVal = getEmpSelect();
                if(empSelectVal && empSelectVal.type == 1) //1. Departments
                    myForm.find('#Departments').val(empSelectVal.value);
                else if(empSelectVal && empSelectVal.type == 2) //2. Employees
                    myForm.find('#Employees').val(empSelectVal.value);

                //PaySelect
                if(paySelectVal == 3) { //3. Specific salary items
                    var selSalaryItems = myForm.find('#SalaryItemsIds').val();
                    if(selSalaryItems) myForm.find('#SalaryItems').val(selSalaryItems.join(','));
                }

                var submit = $(this).attr("id") == "submitRequest";
                myForm.find(" #submit").val(submit);

                //Grid data
                var grid = myForm.find("#EmpGrid").data("kendoGrid");
                var newRecords = [], gridData = grid.dataSource.data();

                for(var i = 0; i < gridData.length; i++)  {
                    var record = Grids.toValidJson(gridData[i]);
                    record.dirty = gridData[i].dirty;
                    newRecords.push(record);
                }

                //Save Page
                FormJs.saveForm(myForm, $(this), function (res) {
                    $("#Documents").attr("disabled", false);
                    if(res && res.model) {
                        model = res.model;
                        $("#" + formId + " #Id").val(res.model.Id);
                        if(res.error) toastr.error(res.error);
                    } else
                        toastr.success("@MsgUtils.Instance.Trls("SaveComplete")");

                    $("#renderbody").load(oldulr);
                }, newRecords);
            });

            if(myForm.find("#Id").val() == 0) $("#Documents").attr("disabled", true);

        }); //end get form
    }

    //Open window when click
    $("#Documents").on('click', function() {
        $("#docWindow").data("kendoWindow").refresh("/FileUpload/Edit?Source=PayRequest&SourceId=" + @Model.Id).center().open();
        $("#Documents").fadeOut();
    });

    //----Documents----
    $("#docWindow").kendoWindow ({
        title: "@MsgUtils.Instance.Trls("Pay Request")",
        minWidth: "1000px",
        width: "80%",
        height: "80%",
        actions: ["Minimize", "Maximize", "Close"],
        visible: false,
        close: function() {
            $("#Documents").fadeIn();
            $("#Documents #nofdocs").text($("#docWindow table > tbody > tr.template-download").length);
            $("#docWindow").empty();
        }
    });

</script>
