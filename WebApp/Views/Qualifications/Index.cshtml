
@using System.Web.Script.Serialization
@using WebApp.Extensions

@{
    ViewBag.Title = "Index";
    Layout = null;
    var rtl = User.Identity.RTL();
    var admin = User.Identity.CanCustomize();
    int dataLevel = 0, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
    string[] function = ViewData["Functions"] as string[];

}
<br>
<div id="QualGroupsDiv"></div>
<script>

    var QualRank = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.QualRank));
    var QualCat  = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.QualCat));
    var objectName = "QualGroups";

    Grids.batchGrid({
        read: "@Url.Action("GetQualGroup", "Qualifications")",
        update:"@Url.Action("UpdateQualGroup", "Qualifications")",
        create:"@Url.Action("CreateQualGroup", "Qualifications")",
        destroy:"@Url.Action("DeleteQualGroup", "Qualifications")",
        admin:"@admin",
        lang:"@User.Identity.GetCulture()",
        objectName: "QualGroups",
        recordName: "Name",
        gridName: "QualGroupsDiv",
        detailInit:detailInit,
        fields:{CreatedUser:{editable:false},CreatedTime:{editable:false},ModifiedUser:{editable:false},ModifiedTime:{editable:false},Code:{editable:false}},

    });

    function detailInit(e) {

        var objectName = "Qualifications";
        $("<div id='Qualify" + e.data.Id + "'/>").appendTo(e.detailCell);
        var gridname = "'Qualify" + e.data.Id + "'";
        Grids.batchGrid({
        read: "@Url.Action("GetQualification", "Qualifications")?Id=" + e.data.Id,
        create:"@Url.Action("CreateQualification", "Qualifications")",
        update:"@Url.Action("UpdateQualification", "Qualifications")",
        destroy:"@Url.Action("DeleteQualification", "Qualifications")",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        objectName: "Qualifications",
        parentColumnName:"QualGroupId",
        parentColumnId:e.data.Id,
        recordName: "Name",
        gridName: 'Qualify' + e.data.Id,
        fields:{CreatedUser:{editable:false},CreatedTime:{editable:false},ModifiedUser:{editable:false},ModifiedTime:{editable:false},Code:{editable:false}},

        height: 650,
        toolbar: '<div><div style="@(rtl ? "float: right" : "float: left")"><a class="btn btn-default btn-sm glyphicon glyphicon-plus" onclick="Grids.addNewClick(' + gridname + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("AddNewRecord")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ok" onclick="Grids.saveClick(' + gridname + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("SaveChanges")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + gridname + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;&nbsp;<div class="btn-group"><button type="button" class="btn btn-default btn-sm glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span>&nbsp;</button><ul class="dropdown-menu">@if (admin){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + gridname + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}'+
                 '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + gridname + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + gridname + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
                 '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + gridname + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>' ,
            columns: [
                {
                    field: "Rank", values: QualRank
                },
                {
                    field: "Category", values: QualCat
                }
            ],
            select: { "Rank": QualRank , "Category": QualCat }

    });
    }

</script>
@Html.Partial("_BatchGrid", new ViewDataDictionary { { "Admin", "True" }, { "gridName", "QualGroupsDiv" }, { "ObjectName", "QualGroups" } })


