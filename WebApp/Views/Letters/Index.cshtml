@using WebApp.Extensions
@using System.Web.Script.Serialization


@{
    Layout = null;
    var admin = User.Identity.CanCustomize();
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    int dataLevel = 0, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);

}


<br />
<div id="Letters">
        <button class="btn-sm btn-primary" id="Downloadsam">@MsgUtils.Instance.Trls("DownloadSamples")</button>
        <div id="ContractWindow"></div>

</div>
<br />

<div id="HrLettersGrid">

</div>
<script>

    var rtl = @rtl.ToString().ToLower();
    if(rtl) $("#Letters").addClass("rtl");
   

    var Columns = [{field:"LetterTempl",template:"<div class='upFile'><input type='file'  class='upload' name='files'/><span>#:LetterTempl#</span></div>"}]
    Grids.batchGrid({
        read: "@Url.Action("GetLettersData","Letters")",
        create: "@Url.Action("CreateLetter","Letters")",
        update: "@Url.Action( "UpdateLetter", "Letters")",
        destroy: "@Url.Action("DeleteLetter", "Letters")",
        admin: "@admin", // Admin role
        lang: "@User.Identity.GetCulture()",
        objectName: "HrLetters",
        recordName: "Name",
        dataBound: function(e){
            var gridName = "HrLettersGrid";
            var grid = $("#"+gridName).data("kendoGrid");
            grid.tbody.find(".upload").kendoUpload({
                multiple:false,
                async:{
                    saveUrl:"/Letters/UploadFile"
                },
                validation:{
                    allowedExtensions:[".doc",".docx"]
                },
                    upload:function(e){
                        var item = grid.dataItem(this.element.closest("tr"));
                        e.data = {id: item.Name}
                    },error:function(e){
                        console.log(e);
                    },
                    success:function(e){
                        var FileName = e.response.FileName;
                        var Item = grid.dataItem(this.element.closest("tr"));
                        this.element.closest("div.upFile").children("span").text(FileName);
                        Item.LetterTempl = FileName;
                        Item.dirty = true;
                    }
                });
        },
        fields:{LetterTempl:{  editable: false}},
        columns:Columns,
        gridName: "HrLettersGrid",
    });


</script>
@Html.Partial("_BatchGrid", new ViewDataDictionary { { "Admin", admin }, { "GridName", "HrLettersGrid" }, { "ObjectName", "HrLetters" } })
