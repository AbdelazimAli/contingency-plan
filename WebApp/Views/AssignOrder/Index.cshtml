@using WebApp.Extensions
@{
    Layout = null;
    var rtl = User.Identity.RTL();
    string culture = User.Identity.GetCulture();
    var admin = User.Identity.CanCustomize();
    ViewBag.Title = "Index";
    int dataLevel = 4, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
    string[] function = ViewData["Functions"] as string[];
    bool isSSMenu = ViewBag.isSSMenu;
    bool mangRole = ViewBag.MangRole;

}
@Html.Partial("~/Views/Shared/_RequestFilters.cshtml", new ViewDataDictionary { { "HasDepts", isSSMenu ? "false" : "true" } })

<div id="AssignOrderDiv"></div>

<script>
      function GetStatus(data) {
        var iconClass = "ace-icon fa fa-circle stat";

        if (data.ApprovalStatus < 6) //Pending
            iconClass += "12"; //gold
        else if (data.ApprovalStatus == 6) //Approved
            iconClass += "1";
        else if (data.ApprovalStatus == 9) //Rejected
            iconClass += "3";
        else if (data.ApprovalStatus == 7 || data.ApprovalStatus == 8) //Cancel
            iconClass = "k-icon k-i-cancel";

        return iconClass;
    }
    var hiddenCols = { 4: ["AuthEmpName", "AuthDeptName", "AuthPosName", "WorkflowTime"] };
    var leaveTabs = [{ Id: 1, Name: "Pending", Class: "ace-icon fa fa-circle stat12", Title: "@MsgUtils.Instance.Trls("Pending Assign Orders")" },
                     { Id: 2, Name: "Approved", Class: "ace-icon fa fa-circle stat1", Title: "@MsgUtils.Instance.Trls("Approved Assign Orders")" },
                     { Id: 3, Name: "Rejected", Class: "ace-icon fa fa-circle stat3", Title: "@MsgUtils.Instance.Trls("Rejected Assign Orders")" },
                     { Id: 4, Name: "Archived", Class: "ace-icon fa fa-circle stat2", Title: "@MsgUtils.Instance.Trls("Archived Assign Orders")" }];
    var UserleaveTabs = [{ Id: 2, Name: "Approved", Class: "ace-icon fa fa-circle stat1", Title: "@MsgUtils.Instance.Trls("Approved Assign Orders")" }];
    var readUrl = "@Url.Action("GetAllAssignOrders", "AssignOrder")?MenuId=@Request.QueryString["MenuId"]";

    if ("@isSSMenu" == "True" && "@mangRole" == "False") {
        //Employee
        RequestFilters.applyAllFilters(UserleaveTabs, hiddenCols, "AssignOrderDiv", readUrl, '@Url.Action("Details", "AssignOrder")');
        RequestFilters.setTab(2);
    }
    else if ("@mangRole" == "True") {
        //Manager
        RequestFilters.applyAllFilters(leaveTabs, hiddenCols, "AssignOrderDiv", readUrl, '@Url.Action("Details", "AssignOrder")?Manager=' + "@mangRole");
        RequestFilters.setTab(1);
    }
    else {
        //HR
        RequestFilters.applyAllFilters(leaveTabs, hiddenCols, "AssignOrderDiv", readUrl, '@Url.Action("Details", "AssignOrder")');
        RequestFilters.setTab(1);
    }

    $(function () {
        var approvalStatus = [{ value: 1, text: '@MsgUtils.Instance.Trls("Darft")' }, { value: 2, text: '@MsgUtils.Instance.Trls("Submit")' },
             { value: 3, text: '@MsgUtils.Instance.Trls("AprovalEmployeeReview")' }, { value: 4, text: '@MsgUtils.Instance.Trls("ManagerReview")' },
             { value: 5, text: '@MsgUtils.Instance.Trls("Accepted")' }, { value: 6, text: '@MsgUtils.Instance.Trls("Approved")' },
             { value: 7, text: '@MsgUtils.Instance.Trls("Cancel before accepted")' }, { value: 8, text: '@MsgUtils.Instance.Trls("Cancel after accepted")' },
             { value: 9, text: '@MsgUtils.Instance.Trls("Rejected")' }];
        var calcsMethod = [{ value: 1, text: '@MsgUtils.Instance.Trls("Monetary")' }, { value: 2, text: '@MsgUtils.Instance.Trls("Time Compensation")' }];
        var Duration = [{ value: 1, text: '@MsgUtils.Instance.Trls("Day")' }, { value: 2, text: '@MsgUtils.Instance.Trls("0.25 day")' }, { value: 3, text: '@MsgUtils.Instance.Trls("0.5 day")' }];
        var grid = "'AssignOrderDiv'";
        Grids.indexGrid({
            read: RequestFilters.getReadUrl(),
            show: "@Url.Action("Details", "AssignOrder")",
            edit: "@Url.Action("Details", "AssignOrder")",
            del: "@Url.Action("DeleteOrders", "AssignOrder")",
            objectName: "AssignOrderTable",
            gridName: "AssignOrderDiv",
            recordName: "Id",
            columns: [{ field: "ApprovalStatus", values: approvalStatus }, { field: "Status", template: "<i class='#:GetStatus(data)#' ></i>" },{ field: "CalcMethod", values: calcsMethod },{ field: "Duration", values: Duration}, { field: "Id", locked: true }],
            select: { "ApprovalStatus": approvalStatus },
            admin: "@admin",
            lang: "@User.Identity.GetCulture()",
            toolbar: '<div style="float: left"><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}' +
              '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
              '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>',
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            pageable: { pageSize: 100, pageSizes: [50, 100, 150, 200, 300, 400, 500] },
            dataBound: function () {
                var gridName = this.gridName;
                $("#" + gridName).find(".k-grid-Delete, .k-grid-edit").each(function (e) {
                    var row = $(this).closest("tr");
                    var model = $("#" + gridName).getKendoGrid().dataItem(row);
                    var date = date1 = new Date();

                    if (model.AssignDate < date.setHours(0, 0, 0, 0) || model.ApprovalStatus == 3 || model.ApprovalStatus == 4 || model.ApprovalStatus == 5 || model.ApprovalStatus == 6 || model.ApprovalStatus == 7 || model.ApprovalStatus == 8 || model.ApprovalStatus == 9) {
                        $(this).hasClass("k-grid-edit");
                        $(this).toggle()
                    }
                    //if ($(this).hasClass("k-grid-Delete")) $(this).toggle(); //hide delete btn
                    //else if ($(this).hasClass("k-grid-edit")) $(this).toggle(); //hide edit btn
                });
            }
        })
    })//end of function
</script>