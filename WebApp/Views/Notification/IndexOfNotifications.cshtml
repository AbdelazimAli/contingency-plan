
@using System.Web.Script.Serialization
@using WebApp.Extensions
@{
    Layout = null;
    var admin = User.Identity.CanCustomize();
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    string[] function = ViewData["Functions"] as string[];

}

<div id="NotifyConditionsDiv"></div>

<script>
    Grids.indexGrid({
        read: "@Url.Action("GetNotifyConditions", "Notification")?MenuId=@Request.QueryString["MenuId"]",
        show: "@Url.Action("NotificationEdit", "Notification")",
        edit: "@Url.Action("NotificationEdit", "Notification")",
        del: "@Url.Action("DeleteNotification", "Notification")",
        objectName: "NotifyConditions",  // name of the page or table name used to create local db key
        gridName: "NotifyConditionsDiv",
        recordName: "ColumnName",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        columns: [{ field: "EncodedMsg", template: "<div class='MyBody'>#: EncodedMsg #</div>" }],
        toolbar: kendo.template($("#Newtemplate").html()),
        dataBound: function (e) {
            var grid = this.gridName;
            $("#" + grid).find(".MyBody").each(function () {
                var row = $(this).closest("tr");
                var model = $("#" + grid).getKendoGrid().dataItem(row);
                model.set("EncodedMsg", decodeHtml(model.EncodedMsg));
            });
        }
    });
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        // var bodyTxt = txt.value.replace(/<[a-z\/:";=\-\s*]*>/g, '').replace(/&nbsp;/gi, '');
        var bodyTxt = txt.value.replace(/<[^>]*>/g, '').replace(/&nbsp;/gi, '');
        return bodyTxt.toString();
    }

</script>
<script type="text/x-kendo-template" id="Newtemplate">
    <div>
        &nbsp;
        <div class="btn-group" style="@(rtl ? "float: left " : "float: right")">
            <button type="button" class="btn btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" id="toolsMenu">
                @if (admin)
                {
                    <li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid('NotifyConditionsDiv')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>
                }
                <li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid('NotifyConditionsDiv')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li>
                @if (function != null && function.Length > 0)
                {
                    if (Array.Exists(function, f => f == "ExportExcel"))
                    {
                        <li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl('NotifyConditionsDiv')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>
                    }
                    if (Array.Exists(function, f => f == "ExportPdf"))
                    {
                        <li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf('NotifyConditionsDiv')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>
                    }
                }    
                        </ul>
        </div>
    </div>
</script>




