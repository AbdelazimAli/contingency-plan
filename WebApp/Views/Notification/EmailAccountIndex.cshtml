
@using System.Web.Script.Serialization
@using WebApp.Extensions
@{
    Layout = null;
    var admin = User.IsInRole("Admin");
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    string[] function = ViewData["Functions"] as string[];
}
@Html.Partial("_RequestFilters", new ViewDataDictionary { { "GridName", "emailDiv" }, { "HasDepts", "false" }, { "Functions", function }, { "TableName", "EmailAccounts" } })
<div id="emailDiv"></div>

<script>
    $("#NicePen").hide();
    var addUrl = "@Url.Action("DetailsOfEmail", "Notification")";
    RequestFilters.ApplayAllFilters([], {}, "Users", "@Url.Action("GetEmailAccount", "Notification")?MenuId=@Request.QueryString["MenuId"]", addUrl);
    var grid = "'emailDiv'"
    Grids.indexGrid({
        read: "@Url.Action("GetEmailAccount", "Notification")",
        show: "@Url.Action("DetailsOfEmail", "Notification")",
        edit: "@Url.Action("DetailsOfEmail", "Notification")",
        del: "@Url.Action("DeleteEmailAccount", "Notification")",
        objectName: "EmailAccount",  // name of the page or table name used to create local db key
        gridName: "emailDiv",
        recordName: "Name",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        columns: [{
            field: "UseDefaultCredentials",
            template: '<input  type="checkbox" #:UseDefaultCredentials == true ? "checked" : ""# disabled />'
        }, {
            field: "EnableSsl",
            template: '<input  type="checkbox" #:EnableSsl == true ? "checked" : ""# disabled />'
        }],
        toolbar: '<div style="float: left"><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}' +
                '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
                '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>',
    });
</script>
