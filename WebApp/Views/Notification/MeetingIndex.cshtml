
@using System.Web.Script.Serialization
@using WebApp.Extensions
@{
    Layout = null;
    var admin = User.IsInRole("Admin");
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    string[] function = ViewData["Functions"] as string[];

}
@Html.Partial("_RequestFilters", new ViewDataDictionary { { "GridName", "MeetingDiv" }, { "HasDepts", "false" }, { "TableName", "Meetings" } })
<div id="MeetingDiv"></div>

<script>
    //format: '{0:hh:mm}'
    var addUrl = "@Url.Action("MeetingDetails", "Notification")";
    RequestFilters.ApplayAllFilters([], {}, "MeetingDiv", "@Url.Action("ReadMeeting", "Notification")?MenuId=@Request.QueryString["MenuId"]", addUrl);
    var gridname = "'MeetingDiv'";
    //1-Created  2-Modified  3-Canceled
    var Status = [{ value: 1,  text: '@MsgUtils.Instance.Trls("Created")' }, { value: 2, text: '@MsgUtils.Instance.Trls("Modified")' }];
    Grids.indexGrid({
        read: "@Url.Action("ReadMeeting", "Notification")?MenuId=@Request.QueryString["MenuId"]",
        edit: "@Url.Action("MeetingDetails", "Notification")",
        objectName: "Meeting",  // name of the page or table name used to create local db key
        gridName: "MeetingDiv",
        recordName: "",
        admin: "@admin",
        lang: "@User.Identity.GetCulture()",
        columns: [{ field: "Status", values: Status }
    ],
        select: { "Status": Status },
        toolbar: '<div><div style="@(rtl ? "float: right" : "float: left")"></div><div class="btn-group"><button type="button" class="btn btn-xs btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid('+gridname+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}'+
                '<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl('+gridname+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li><li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid('+gridname+')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li></ul></div></div>',
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true,
        pageable: { pageSize: 25, pageSizes: [25, 50, 75, 100, 125, 150, 175] },
        dataBound: function () {
            var gridName = this.gridName;
            var name = $("#" + this.gridName);
            var gridd = name.data("kendoGrid");
            name.find(".k-grid-Cancel").each(function (e) {
                var model = name.getKendoGrid().dataItem($(this).closest("tr"));
                  //  $(this).click(ClickCancel);
                    $(this).attr("modelid", model.Id);
                    $(this).prop("innerHTML", "<span class='k-icon k-i-Cancel'></span> @MsgUtils.Instance.Trls("CancelMeeting")");
            });
        }

    });
</script>





