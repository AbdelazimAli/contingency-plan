
@using System.Web.Script.Serialization
@using WebApp.Extensions
@{
    ViewBag.Title = "Index";
    Layout = null;
    var rtl = User.Identity.RTL();
    var culture = User.Identity.GetCulture();
    var admin = User.Identity.CanCustomize();
    int dataLevel = 4, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
}



<div class="omegaform">
    <fieldset class="set">
        <legend>@MsgUtils.Instance.Trls("Qualifications")</legend>
        <div id="qualification"></div>
    </fieldset>

    <fieldset class="set">
        <legend>@MsgUtils.Instance.Trls("Certifications")</legend>
        <div id="certification"></div>
    </fieldset>
</div>

 
<script>
    var rtl = @rtl.ToString().ToLower();
    if(rtl) $(".omegaform").addClass("rtl");
    var QualId =@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.QualId));
    var CertId=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.CertID));
    var SchoolId=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.School));
    var Status=[{value:1,text:"@MsgUtils.Instance.Trls("Ingoing")"},{value:2,text:"@MsgUtils.Instance.Trls("Completed")"}];
    var Grade=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Grade));
    var Awarding=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.Awarding));
    var empId="@TempData["Id"]";
    ///#region Grids
    ///--Qualification
    var QualificationGrid = "'qualification'";
    Grids.batchGrid({
        read: "@Url.Action("ReadQualification", "People")?Id="+empId,
        create: "@Url.Action("CreateQualification", "People")",
        update: "@Url.Action("UpdateQualification", "People")",
        destroy: "@Url.Action("DeleteQualification", "People")",
        lang: "@User.Identity.GetCulture()",
        objectName: "Qualification", // name of the page or table name used to create local db key
        tableName: "PeopleQuals",
        gridName: "qualification",
        admin: "@admin",
        height: 400,
        toolbar: '<div><div style="@(rtl ? "float: right" : "float: left")"><a class="btn btn-default btn-sm glyphicon glyphicon-plus" onclick="Grids.addNewClick(' + QualificationGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("AddNewRecord")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ok" onclick="Grids.saveClick(' + QualificationGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("SaveChanges")</span></a>&nbsp;<a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + QualificationGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;</div><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid('+QualificationGrid+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}'+
                '<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl('+QualificationGrid+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li> <li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid('+CertificateGrid+')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li></ul></div></div>',
        columns : [{field:"QualId", values:QualId},{field:"SchoolId",values:SchoolId},{field:"Status",values:Status},{field:"Grade",values:Grade}],
        select: { "QualId": QualId,"SchoolId":SchoolId,"Status":Status,"Grade":Grade},
        save: function(e) {
            var grid =  $("#qualification").data("kendoGrid");
            var row = $("#qualification [data-uid=" +e.model.uid + "]");
            var model = grid.dataItem(row);
            model.set("EmpId",empId);
            e.model.EmpId = empId;
            e.model.IsQualification=true;
        },
        fields:{CreatedUser:{editable:false},CreatedTime:{editable:false},ModifiedUser:{editable:false},ModifiedTime:{editable:false}},
    });
    ///--Certificates
    var CertificateGrid = "'certification'";
    Grids.batchGrid({
        read: "@Url.Action("ReadCertification", "People")?Id="+empId,
        create: "@Url.Action("CreateQualification", "People")",
        update: "@Url.Action("UpdateQualification", "People")",
        destroy: "@Url.Action("DeleteQualification", "People")",
        lang: "@User.Identity.GetCulture()",
        objectName: "Certification", // name of the page or table name used to create local db key
        tableName: "PeopleQuals",
        gridName: "certification",
        admin: "@admin",
        height: 400,
        toolbar: '<div><div style="@(rtl ? "float: right" : "float: left")"><a class="btn btn-default btn-sm glyphicon glyphicon-plus" onclick="Grids.addNewClick(' + CertificateGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("AddNewRecord")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ok" onclick="Grids.saveClick(' + CertificateGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("SaveChanges")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + CertificateGrid + ')" style="@(dataLevel < 2 || read == 1 ? "display: none" : "")" accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;</div><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid('+CertificateGrid+')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}'+
                '<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl('+ CertificateGrid +')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li><li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid('+CertificateGrid+')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li></ul></div></div>',
        columns : [{field:"QualId", values:CertId},{field:"SchoolId",values:SchoolId},{field:"Grade",values:Grade}, {field:"Awarding" ,values:Awarding}],
        select: { "QualId": CertId,"SchoolId":SchoolId,"Grade":Grade,"Awarding":Awarding},
        save: function(e) {
            var grid =  $("#certification").data("kendoGrid");
            var row = $("#certification [data-uid=" +e.model.uid + "]");
            var model = grid.dataItem(row);
            model.set("EmpId",empId);
            e.model.EmpId = empId;
            e.model.IsQualification=false;
        },
        fields:{CreatedUser:{editable:false},CreatedTime:{editable:false},ModifiedUser:{editable:false},ModifiedTime:{editable:false}},
    });

    ///#endregion Grid
</script>

