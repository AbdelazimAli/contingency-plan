

@using System.Web.Script.Serialization
@using WebApp.Extensions
@model Model.Domain.Discipline
@{
    Layout = null;
    var admin = User.Identity.CanCustomize();
    var compantId = User.Identity.GetDefaultCompany();
    var culture = User.Identity.GetCulture();
    var rtl = User.Identity.RTL();
    var version = Request.QueryString["Version"];
    int dataLevel = 0, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
}


<br />
<br />
<div id="DisciplineDiv"></div>


@*<script src="~/Scripts/typeahead.bundle.min.js"></script>*@
<script>
    var model;
    var PeriodId=[]
    var DisciplineClass=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.DisciplineClass));
     PeriodId=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.PeriodId));
    var DisplinType=@Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.DisplinType));
  //  PeriodId.push({id:0,name:"Open Period "});
    PeriodId.unshift({id:"", name:'@MsgUtils.Instance.Trls("Open Period")'});
    $(function () {

        //var oldPage = localStorage.getItem("menuhigh").split(",");
        //oldulr = $("#"+ oldPage[2] + " a").attr("href");
        var formId = "DisciplineForm";
        model = @Html.Raw((new JavaScriptSerializer()).Serialize(Model))
        var url = "@Url.Action("ReadFormInfo", "Pages")";
        //If you press on Button Show it will be read only
        var read = "@Request.QueryString["Read"]";
        //Send the serialized model and props to form.js
        $.ajax({
            async: false,
            url: "@Url.Action("ReadFormInfo","Pages")",
            type: "GET",
            dataType: "json",
            contentType: 'application/json',
            data: { objectname: "Discipline", version:"@version", roleId: "@Request.QueryString["RoleId"]"},
            success: function (data) {
                data.FormAction = "@Url.Action("SaveDiscipline", "Discipline")";
                data.FormId = formId;
                data.Culture = '@culture';
                data.TableName = "Disciplines";
                data.companyId = "@User.Identity.GetDefaultCompany()";
                data.admin = '@admin';
                //data.HasPanel=false;
                //Unique for Company
                data.parentColumn = "CompanyId";
                data.parentId = "@compantId";
                data.isLocal = true;

                if(read == 1)
                {
                    data.mode = 'show';
                  //  $("#PeriodId")

                   
                }
                data.rtl = @rtl.ToString().ToLower();
                //Append the form to the div
                $("#DisciplineDiv").Forms(data, model);
                FormJs.fillOptionsDynamic($("#" + formId), "DisciplineClass", DisciplineClass, model);
                FormJs.fillOptionsDynamic($("#" + formId), "PeriodId", PeriodId, model);

                //Translate The Button saveChanges from ColumnsTilte based on Culture
                $("#" + formId).find('#saveChanges').val('@MsgUtils.Instance.Trls("SaveChanges")');
                $("#" + formId).find('#backToIndex').val('@MsgUtils.Instance.Trls("backToIndex")');
                $("#" + formId).on('click','#saveChanges', function (e) {
                    FormJs.saveForm($("#" + formId), $(this), function (res) {
                            model=res;
                            toastr.success("@MsgUtils.Instance.Trls("SaveComplete")");
                        $("#GridRepeatDiv").data("kendoGrid").dataSource.read();
                        updateHistory(oldUlr);
                        },Grids.sendData("GridRepeatDiv"));

                });
                if(read != 1){
                    $("#" + formId).find('#PeriodId').kendoDropDownList({
                        valuePrimitive: true,
                        dataSource:PeriodId ,
                        dataTextField: "name",
                        dataValueField: "id",
                        //optionLabel: " ",
                    });
                } 

                $("#" + formId).on('click','#saveAndClose', function (e) {
                    if($("#" + formId).find(".k-invalid").length > 0) return ;
                    FormJs.saveForm($("#" + formId), $(this), function (res) {
                        model=res;
                        toastr.success("@MsgUtils.Instance.Trls("SaveComplete")");
                        updateHistory(oldUlr);
                    });
                });

            }
        });
        // Find Button BackToindex and bind for Click
        $('#DisciplineDiv').on('click',"#backToIndex",null, function(){
            updateHistory(oldUlr);
        });
        
        $("#" + formId).on('blur','#StartDate', function(){
            var elem = $(this);
            var valueinDays=(elem.data("kendoDatePicker").value()-$("#EndDate").data("kendoDatePicker").value())/(1000*3600*24);
            if(valueinDays > 0 && $('#EndDate').val() != ""){
                if (elem && !elem.hasClass("k-invalid")) {
                    elem.addClass("k-invalid").prop("aria-invalid", true);
                    elem.after("<span class='k-widget k-tooltip k-tooltip-validation k-invalid-msg' data-for='StartDate' role='alert'>@MsgUtils.Instance.Trls("StartDateLThanEndDate")</span>");
                }
            }
            if( $('#EndDate').hasClass("k-invalid")){
                $('#EndDate').removeClass("k-invalid").prop("aria-invalid", false);
                $('#EndDate').next().remove();
            }
        });

        $("#"+formId).on('blur','#EndDate',function(){
            var elem = $(this);
            if(elem.val()!=""){
                var valueinDays=($("#StartDate").data("kendoDatePicker").value()-elem.data("kendoDatePicker").value())/(1000*3600*24);
                if(valueinDays > 0){
                    if (elem && !elem.hasClass("k-invalid")) {
                        elem.addClass("k-invalid").prop("aria-invalid", true);
                        elem.after("<span class='k-widget k-tooltip k-tooltip-validation k-invalid-msg' data-for='EndDate' role='alert'>@MsgUtils.Instance.Trls("EndDateGthanStartDate")</span>");
                    } 
                }
                if($('#StartDate').hasClass("k-invalid")){
                    $('#StartDate').removeClass("k-invalid").prop("aria-invalid", false);
                    $("#StartDate").next().remove();
                }
            }
        });
      
        var columns = [
                   {field:"DisplinType",values:DisplinType},
                   {
                       field: "NofDays",
                       editor: function (container, options) {
                           // console.log(options.model.DisplinType);
                           if (options.model.DisplinType == 4) {
                               var input = $('<input name="NofDays" type="number" style="width: 90%; margin-bottom: 0"/>');
                               input.appendTo(container);
                           }else
                           {

                               $('#GridRepeatDiv').data("kendoGrid").closeCell();
                           }
                       }

                   },
                    {
                        field: "DenyPeriod",
                        editor: function (container, options) {
                            if (options.model.DisplinType == 5 || options.model.DisplinType == 6) {
                                var input = $('<input name="DenyPeriod" type="number" style="width: 90%; margin-bottom: 0"/>');
                                input.appendTo(container);
                            }else
                            {

                                $('#GridRepeatDiv').data("kendoGrid").closeCell();
                            }
                        }
                    }

        ];
        $("div[name=RepeatGridSec]").prepend('<div id="GridRepeatDiv" class="form-group col-lg-12 col-md-12 col-sm-12"></div>');
        var gridname = "'GridRepeatDiv'";
        Grids.batchGrid({
            read: "@Url.Action("ReadDisRepeat", "Discipline")?DisplinId="+model.Id,
            update: "@Url.Action("UpdateDisRepeat", "Discipline")",
            lang: "@User.Identity.GetCulture()",
            objectName: "DisplinRepeats",
            admin: "@admin", // Admin role
            lang: "@User.Identity.GetCulture()",
            recordName: "Name",
            toolbar:read==1? '<div></div>': '<div><div style="@(rtl ? "float: right" : "float: left")"><a class="btn btn-default btn-sm glyphicon glyphicon-plus" onclick="Grids.addNewClick(' + gridname + ')" accesskey="s"><span>&nbsp;@MsgUtils.Instance.Trls("AddNewRecord")</span></a><a class="btn btn-default btn-sm glyphicon glyphicon-ban-circle" onclick="Grids.cancelClick(' + gridname + ')" accesskey="c"><span>&nbsp;@MsgUtils.Instance.Trls("CancelChanges")</span></a>&nbsp;&nbsp;<div class="btn-group" style="@(admin == false ? "display: none" : "")"><button type="button" class="btn btn-default btn-sm glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + gridname + ')"><span>&nbsp;&nbsp;&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a>&nbsp;&nbsp;</li></ul></div></div></div>',                    
            gridName: "GridRepeatDiv",
            height:250,
            columns: columns,
            select: { "DisplinType": DisplinType},
            fields:{CreatedUser:{editable:false},CreatedTime:{editable:false},ModifiedUser:{editable:false},ModifiedTime:{editable:false}},
            save: function (e) {
                if (e.values.DisplinType !=4 ||e.values.DisplinType !=5 ||e.values.DisplinType !=6 ) {
                    {
                        e.model.NofDays =0;
                        e.model.DenyPeriod =0;

                    }
                }
            }
        });

    });
</script>





