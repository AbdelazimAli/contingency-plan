@using WebApp.Extensions
@{
    ViewBag.Title = "Index";
    Layout = null;
    var rtl = User.Identity.RTL();
    string culture = User.Identity.GetCulture();
    var admin = User.IsInRole("Admin");
    int dataLevel = 4;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    bool hasDepts = ViewData["HasDepts"] == null || ViewData["HasDepts"] as string == "true";
    bool hasRange = ViewData["HasRange"] == null || ViewData["HasRange"] as string == "true";
    bool hasPdfExcel = ViewData["HasPdfExcel"] == null || ViewData["HasPdfExcel"] as string == "true";
    string[] function = ViewData["Functions"] as string[];
    string objectName = ViewData["ObjectName"]?.ToString();
    string OldObjectName = ViewData["OldObjectName"]?.ToString();
    string TableName = ViewData["TableName"]?.ToString();
    string GridName = ViewData["GridName"]?.ToString();
}

<script src="~/Scripts/app/tree.js"></script>
<br />
<div id="filterDiv" class="btns-grid">

    @if (dataLevel > 2)
    {
        <button id="AddRecord" class="btn add"></button>
    }
    @if (function != null && function.Length > 0)
    {
        if (Array.Exists(function, f => f == "Import"))
        {
          
                <button class="btn import" onclick="ReturnView()">@MsgUtils.Instance.Trls("Import")</button>
            
        }
        if (Array.Exists(function, f => f == "Export"))
        {
            
                <button class="btn export" onclick="AddFields()">@MsgUtils.Instance.Trls("Export")</button>

        }
        if (Array.Exists(function, f => f == "ExportPdf"))
        {

        <button class="btn pdf" onclick="Grids.saveAsPdf('@GridName')">@MsgUtils.Instance.Trls("SaveAsPDF")</button>

        }

        if (Array.Exists(function, f => f == "ExportExcel"))
        {

        <button class="btn excel" onclick="Grids.saveAsXsl('@GridName')">@MsgUtils.Instance.Trls("SaveAsExcel")</button>
        }
    }

    @if (hasDepts)
    {
        <button id="deptsFiletrBtn" class="btn reload"></button>
        <div class="dropdown depts">
            <button id="dLabel" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@MsgUtils.Instance.Trls("Filter Department")</button>
            <ul id="filterDept" class="dropdown-menu" aria-labelledby="dLabel">
                <li>
                    <a href="javascript:;" id="filterDeptItem"></a>
                </li>
            </ul>
        </div>
    }


    <div class="dropdown settings" id="toolsMenu">
        <button id="dLabel" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
        <ul class="dropdown-menu" aria-labelledby="dLabel">
        @if (admin == true)
        {
            <li>
                <a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid('@GridName')">
                    <span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span>
                </a>
            </li>

            <li>
                <a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid('@GridName')">
                    <span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span>
                </a>
            </li>
         }

            <li id="gridf1">
                <a class="glyphicon glyphicon-share-alt" onclick="Grids.redrawGrid(1, '@GridName')">
                    <span>&nbsp;@MsgUtils.Instance.Trls("RowFilter")</span>
                </a>
            </li>
            <li id="gridc1">
                <a class="glyphicon glyphicon-remove" onclick="Grids.redrawGrid(2, '@GridName')">
                    <span>&nbsp; @MsgUtils.Instance.Trls("ColumnMenu")</span>
                </a>
            </li>
        </ul>
    </div>

    @if (hasRange)
    {

        <div id="NicePen">
            <div class="dates ">
                <div class="form-group">
                    <label>@MsgUtils.Instance.Trls("Start Date")</label>
                    <input name="start" id="start" />
                </div>
                <div class="form-group">
                    <label>@MsgUtils.Instance.Trls("End Date")</label>
                    <input name="end" id="end" />
                </div>
            </div>
            <div class="dropdown filter">
                <button id="dLabel" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                <ul id="filterRange" class="dropdown-menu @(rtl ? "" : "pull-right")" aria-labelledby="dLabel">
                    <li>
                        <a href="javascript:;" class="range" id="0"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Custom")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="1"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Today")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="2"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Yesterday")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="3"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Last 7 Days")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="4"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Last 14 Days")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="5"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Last 30 Days")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="6"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("This Week")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="7"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Last Week") <span> @ViewBag.week </span></a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="8"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("This Month")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="9"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("Last Month")</a>
                    </li>
                    <li>
                        <a href="javascript:;" class="range" id="10"><span class="checkedRange fa fa-space"></span>@MsgUtils.Instance.Trls("All Time")</a>
                    </li>
                </ul>
            </div>
        </div>

    }
</div>


<div id="pageTabs"></div>
<div id="waitWindow">
    @MsgUtils.Instance.Trls("takeWhileFor")
    <img id="compLoadImg" src="~/Content/Default/loading-image.gif" />
</div>



<script>
    
    /// <summary>
    /// Filter Department, Ranges & Draw Tabs if Exists
    /// </summary>
    /// mainFunctions:
    ///   #ApplayAllFilters,
    ///   --Use Once before call any thing else
    ///   --Params:
    ///     "tabList": list of objects    -> list of tabs
    ///     "hiddenCols": object          ->  for tabs to hide columns for some tabs
    ///     "gridName", "readUrl"
    ///     "isMultiGrid": bool(optional) -> fot pages that contains more than 1 grid.
    ///------------------------------------------------------------------------
    ///   #GetReadUrl,
    ///   --Use in read url in grid to apply cashed filter form LocalStorage.
    ///   --Params:
    ///     "baseUrl": string(optional)   -> needed if isMultiGrid only

    //Import & Export Function region
    var file = {ver:@Request.QueryString["Version"] , MenuId:@Request.QueryString["MenuId"],objectName:"@objectName",OldObjectName:"@OldObjectName",TableName:"@TableName",ErrorData:false,DataLevel:@dataLevel};

    var waitWindow = $("#waitWindow").kendoWindow({
        title: "@MsgUtils.Instance.Trls("Please Wait")",
        actions: [], //to remove close btn
        width: "40%",
        height: "100",
        visible: false
    }).data("kendoWindow");

    function AddFields() {
        waitWindow.center().open();

        $.ajax({
            url:"/ImportData/AddFields",
            type:"POST",
            data:file,
            success:function(res){
                var ok = res.substring(0,2);
                if(ok != "Ok")
                    toastr.error(res);
                else
                    window.location = "/SpecialData/EmployeesData/"+res.substring(2,res.length)+".xlsx?DataLevel=@dataLevel&dummy="+(new Date().getTime());

                waitWindow.close();
            },error:function(err){
            }
        });
    }

    function ReturnView(){
        updateHistory("/ImportData/ImportDataView",{File:file})
    }

    //End region
    var RequestFilters = function () {
        var gridName, baseReadUrl, addUrl, tabList, hiddenCols = [],
            tab = 1, selectedRange = 10, selectedDepts = [],
            culture = "@culture";

        function loadFromLocalStrorage(gridName) {
            //Range Filter
            var storedRange = localStorage.getItem(gridName + '-range-filter');
            if (storedRange != null) {
                var rangeObj = JSON.parse(storedRange);
                if (rangeObj) {
                    selectedRange = rangeObj.selectedRange;
                    if (rangeObj.startRange) $("#start").data('kendoDatePicker').value(rangeObj.startRange);
                    if (rangeObj.endRange) $("#end").data('kendoDatePicker').value(rangeObj.endRange);
                }
            }
            $('#filterRange #' + selectedRange + ' .checkedRange').addClass('fa-check');

            //Depts Filter
            var storedDepts = localStorage.getItem(gridName + "-depts-filter");
            if (storedDepts != null) selectedDepts = JSON.parse(storedDepts);
        }

        function ApplayAllFilters(tabList, hiddenCols, gridName, readUrl, addUrl, isMultiGrid) {
            tabList = tabList;
            var grids;
            if (isMultiGrid) {
                grids = gridName;
                gridName = gridName[0];
            }
            else
                gridName = gridName;

            baseReadUrl = readUrl;
            addUrl = addUrl;
            hiddenCols = hiddenCols;
            $('.dates').find('#start,#end').kendoDatePicker({ culture: culture, change: dateChange });
            loadFromLocalStrorage(gridName);

            //-----------Tabs-----------
            if (tabList && tabList.length) {
                FormJs.DrawTabs('pageTabs', tabList);
                $('#pageTabs .tab-tools').remove();

                $('#menu_tabs').on('click', 'a', function (e) {
                    var name = $(this).attr('id'), grid = $('#' + gridName).data('kendoGrid'),
                        columns = [];

                    var tabObj = tabList.find(t => 't_' + t.Name == name);
                    if (tabObj) tab = tabObj.Id;

                    if (hiddenCols && grid) {
                        columns = hiddenCols[tab]; //current hidden columns

                        $.each(hiddenCols, function (index, item) {
                            for (var j = 0 ; j < item.length; j++) {
                                if (columns && columns.indexOf(item[j]) > -1) //hide columns
                                    grid.hideColumn(columns[j]);
                                else
                                    grid.showColumn(item[j]);  //show other column if not hidden
                            }
                        });

                        var designChanged = $('#' + gridName).attr('designChanged');
                        if (designChanged == 'true') Grids.TriggerChanges(gridName, 'Design', false);
                    }

                    refreshGrid();


                });
            }
            //-----------End Tabs-----------


            function refreshGrid() {
                //if (isMultiGrid) { //for leaveTrans
                //    for (var i = 0; i < grids.length; i++) {
                //        var grid = $('#' + grids[i]).data('kendoGrid');
                //        grid.dataSource.transport.options.read.url = GetReadUrl(baseReadUrl[i]);
                //        grid.dataSource.read();
                //    }
                //}
                //else {
                //    var grid = $('#' + gridName).data('kendoGrid');
                //    grid.dataSource.transport.options.read.url = GetReadUrl();
                //    grid.dataSource.read();
                //}
                $("#"+ gridName +"f1 > a").removeAttr('onclick');
                $("#"+ gridName).off('click', '#'+ gridName + 'f1 > a', filterClick);
                $("#"+ gridName).on('click', '#'+ gridName + 'f1 > a', filterClick);
                var grid = $('#' + gridName).data('kendoGrid'), dSUrl = GetReadUrl();

                grid.dataSource.transport.options.read.url = dSUrl;
                grid.dataSource.read();

                //Update Filter
                FilterColumn(gridName);

            }

            function filterClick() {
                Grids.redrawGrid(1, this);
                $('#'+ gridName +'f1 > a').removeAttr('onclick');
                FilterColumn(gridName);
            }

            function FilterColumn(gridName) {
                var filterFields = $('#' + gridName).find('[data-role="autocomplete"]');
                filterFields.each(function (index, item) {
                    var autoComp = $(item).data('kendoAutoComplete');
                    if(autoComp) autoComp.dataSource.transport.options.read.url = GetReadUrl();
                });
            }


            //-----------Range Filter-----------
            if($('.dates').length)
            {
                toggleDates();

                //filter range
                $('#filterRange').on('click', '.range', function (e) {
                    var element = $(this);
                    selectedRange = element.prop('id');

                    element.closest('#filterRange').find('.checkedRange').removeClass('fa-check');
                    element.find('.checkedRange').addClass('fa-check');

                    toggleDates();
                    if (selectedRange == 0) dateChange();
                    else refreshGrid();

                    var rangeObj = { selectedRange: selectedRange };
                    localStorage.setItem(gridName + '-range-filter', JSON.stringify(rangeObj));
                });

                var validator = $('.dates').kendoValidator().data('kendoValidator');
                validator.validateInput();

                function dateChange() {
                    var startRange = kendo.toString($('#start').data('kendoDatePicker').value(), 'yyyy-MM-dd');
                    endRange = kendo.toString($('#end').data('kendoDatePicker').value(), 'yyyy-MM-dd');

                    if (startRange && endRange) {
                        refreshGrid();
                        var rangeObj = { selectedRange: selectedRange, startRange: startRange, endRange: endRange };
                        localStorage.setItem(gridName + '-range-filter', JSON.stringify(rangeObj));
                    }
                }

                function toggleDates() {
                    if (selectedRange == 0) $('.dates').show(); //custom
                    else $('.dates').hide();
                }
            }

            //-----------End Range Filter-----------



            //-----------Department Filter-----------

            //to prevent toggle button when expand tree
            $('#filterDept').on('click', 'li', function (e) { e.stopPropagation(); });

            $("#filterDeptItem").TreeView({
                loadOnDemand: false,
                dragAndDrop: false,
                table: "CompanyStructures",
                root: "Company",
                lang: culture,
                checkboxes: { checkChildren: true },
                dataBound: function (e) {
                    var treeView = $("#filterDeptItem").data("kendoTreeView");
                    treeView.expand(".k-item");
                    if (e.node) bindChecked([treeView.dataItem(e.node)], selectedDepts);
                }
            });

            $("#deptsFiletrBtn").click(function (e) {
                var treeView = $("#filterDeptItem").data("kendoTreeView");
                selectedDepts = [];
                checkNodeIds(treeView.dataSource.view(), selectedDepts);
                console.log(selectedDepts)
                refreshGrid();
                localStorage.setItem(gridName + "-depts-filter", JSON.stringify(selectedDepts));
            });
            //-----------End Department Filter-----------



            //-----------Add New Record-----------
            $('#AddRecord').click(function () {
                updateHistory(addUrl + '/0?Read=0&Version=@Request.QueryString["Version"]&DataLevel=@dataLevel&RoleId=@Request.QueryString["RoleId"]&MenuId=@Request.QueryString["MenuId"]');
            });

        }

        function GetReadUrl(baseUrl) {
            var startRange, endRange;

            if (selectedRange == 0) {
                startRange = kendo.toString($('#start').data('kendoDatePicker').value(), 'yyyy-MM-dd');
                endRange = kendo.toString($('#end').data('kendoDatePicker').value(), 'yyyy-MM-dd');
            }

            if (!baseUrl) baseUrl = baseReadUrl;
            return (baseUrl + "&Tab=" + tab + "&Range=" + selectedRange + "&Depts=" + selectedDepts.join(',') + "&Start=" + startRange + "&End=" + endRange);
        }

        function setTab(id) {
            tab = id;
        }

        return {
            ApplayAllFilters: ApplayAllFilters,
            GetReadUrl: GetReadUrl,
            setTab: setTab
        }
    }();

</script>
