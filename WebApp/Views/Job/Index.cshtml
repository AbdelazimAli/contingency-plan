
@using WebApp.Extensions

@{

    ViewBag.Title = "Index";
    Layout = null;
}
@{
    ViewBag.Title = "Index";
    Layout = null;
    var rtl = User.Identity.RTL();
    var admin = User.Identity.CanCustomize();
    int dataLevel = 4, read = 0;
    int.TryParse(Request.QueryString["DataLevel"], out dataLevel);
    int.TryParse(Request.QueryString["Read"], out read);
    string[] function = ViewData["Functions"] as string[];
}
@Html.Partial("_RequestFilters", new ViewDataDictionary { { "GridName", "Job" }, { "HasDepts", "false" }, { "Functions", function }, { "HasRange", "false" }, { "ObjectName", MsgUtils.Instance.Trls("JobGrid") }, { "OldObjectName", "Job" }, { "TableName", "Jobs" } })
<div id="Job"></div>

<script>
    var addUrl = "@Url.Action("Details", "Job")";
    RequestFilters.applyAllFilters([], {}, "Job", "@Url.Action("GetAllJobs", "Job")?MenuId=@Request.QueryString["MenuId"]", addUrl);
    var grid = "'JobGrid'";
    var objectName = "JobGrid";
    Grids.indexGrid({
        read: "@Url.Action("GetAllJobs","Job")?MenuId=@Request.QueryString["MenuId"]",
        edit: "@Url.Action("Details", "Job")",
        del: "@Url.Action("DeleteJob", "Job")",
        show: "@Url.Action("Details", "Job")",
        lang: "@User.Identity.GetCulture()",
        objectName: objectName,
        toolbar: '<div style="float: left"><div class="btn-group"><button type="button" class="btn btn-sm btn-default glyphicon glyphicon-cog dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button><ul class="dropdown-menu" id="toolsMenu">@if(admin == true){<li><a class="glyphicon glyphicon-floppy-save" onclick="Grids.saveGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveGrid")</span></a></li>}' +
                   '@if (function != null && function.Length > 0){if (Array.Exists(function, f => f == "ExportExcel")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsXsl(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsExcel")</span></a></li>}if (Array.Exists(function, f => f == "ExportPdf")){<li><a class="fa fa-file-powerpoint-o" onclick="Grids.saveAsPdf(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("SaveAsPDF")</span></a></li>}}' +
                   '<li><a class="glyphicon glyphicon-trash" onclick="Grids.resetGrid(' + grid + ')"><span>&nbsp; @MsgUtils.Instance.Trls("ResetGrid")</span></a></li> </ul></div></div>&nbsp;&nbsp;</div>',
        recordName: "JobName",
        gridName: "Job",
        admin: "@admin",
    });
</script>











